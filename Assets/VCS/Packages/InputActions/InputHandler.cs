//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/VCS/Packages/InputActions/InputHandler.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace InputActions
{
    public partial class @InputHandler: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @InputHandler()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputHandler"",
    ""maps"": [
        {
            ""name"": ""VirtualStick"",
            ""id"": ""272f6d14-89ba-496f-b7ff-215263d3219f"",
            ""actions"": [
                {
                    ""name"": ""Screen_Position"",
                    ""type"": ""PassThrough"",
                    ""id"": ""32b35790-4ed0-4e9a-aa41-69ac6d629449"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Screen_Press"",
                    ""type"": ""Button"",
                    ""id"": ""3c7022bf-7922-4f7c-a998-c437916075ad"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c52c8e0b-8179-41d3-b8a1-d149033bbe86"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Screen_Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e1394cbc-336e-44ce-9ea8-6007ed6193f7"",
                    ""path"": ""<Pen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Screen_Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5693e57a-238a-46ed-b5ae-e64e6e574302"",
                    ""path"": ""<Touchscreen>/touch*/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touch"",
                    ""action"": ""Screen_Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4faf7dc9-b979-4210-aa8c-e808e1ef89f5"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Screen_Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8d66d5ba-88d7-48e6-b1cd-198bbfef7ace"",
                    ""path"": ""<Pen>/tip"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Screen_Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""47c2a644-3ebc-4dae-a106-589b7ca75b59"",
                    ""path"": ""<Touchscreen>/touch*/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touch"",
                    ""action"": ""Screen_Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Touch"",
            ""bindingGroup"": ""Touch"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // VirtualStick
            m_VirtualStick = asset.FindActionMap("VirtualStick", throwIfNotFound: true);
            m_VirtualStick_Screen_Position = m_VirtualStick.FindAction("Screen_Position", throwIfNotFound: true);
            m_VirtualStick_Screen_Press = m_VirtualStick.FindAction("Screen_Press", throwIfNotFound: true);
        }

        ~@InputHandler()
        {
            UnityEngine.Debug.Assert(!m_VirtualStick.enabled, "This will cause a leak and performance issues, InputHandler.VirtualStick.Disable() has not been called.");
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // VirtualStick
        private readonly InputActionMap m_VirtualStick;
        private List<IVirtualStickActions> m_VirtualStickActionsCallbackInterfaces = new List<IVirtualStickActions>();
        private readonly InputAction m_VirtualStick_Screen_Position;
        private readonly InputAction m_VirtualStick_Screen_Press;
        public struct VirtualStickActions
        {
            private @InputHandler m_Wrapper;
            public VirtualStickActions(@InputHandler wrapper) { m_Wrapper = wrapper; }
            public InputAction @Screen_Position => m_Wrapper.m_VirtualStick_Screen_Position;
            public InputAction @Screen_Press => m_Wrapper.m_VirtualStick_Screen_Press;
            public InputActionMap Get() { return m_Wrapper.m_VirtualStick; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(VirtualStickActions set) { return set.Get(); }
            public void AddCallbacks(IVirtualStickActions instance)
            {
                if (instance == null || m_Wrapper.m_VirtualStickActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_VirtualStickActionsCallbackInterfaces.Add(instance);
                @Screen_Position.started += instance.OnScreen_Position;
                @Screen_Position.performed += instance.OnScreen_Position;
                @Screen_Position.canceled += instance.OnScreen_Position;
                @Screen_Press.started += instance.OnScreen_Press;
                @Screen_Press.performed += instance.OnScreen_Press;
                @Screen_Press.canceled += instance.OnScreen_Press;
            }

            private void UnregisterCallbacks(IVirtualStickActions instance)
            {
                @Screen_Position.started -= instance.OnScreen_Position;
                @Screen_Position.performed -= instance.OnScreen_Position;
                @Screen_Position.canceled -= instance.OnScreen_Position;
                @Screen_Press.started -= instance.OnScreen_Press;
                @Screen_Press.performed -= instance.OnScreen_Press;
                @Screen_Press.canceled -= instance.OnScreen_Press;
            }

            public void RemoveCallbacks(IVirtualStickActions instance)
            {
                if (m_Wrapper.m_VirtualStickActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IVirtualStickActions instance)
            {
                foreach (var item in m_Wrapper.m_VirtualStickActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_VirtualStickActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public VirtualStickActions @VirtualStick => new VirtualStickActions(this);
        private int m_KeyboardMouseSchemeIndex = -1;
        public InputControlScheme KeyboardMouseScheme
        {
            get
            {
                if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
                return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
            }
        }
        private int m_TouchSchemeIndex = -1;
        public InputControlScheme TouchScheme
        {
            get
            {
                if (m_TouchSchemeIndex == -1) m_TouchSchemeIndex = asset.FindControlSchemeIndex("Touch");
                return asset.controlSchemes[m_TouchSchemeIndex];
            }
        }
        public interface IVirtualStickActions
        {
            void OnScreen_Position(InputAction.CallbackContext context);
            void OnScreen_Press(InputAction.CallbackContext context);
        }
    }
}
